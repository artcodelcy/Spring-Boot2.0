package test;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Res{
	public String userName;
	public String sex;
	public boolean flag = false;
	Lock lock = new ReentrantLock();   
}

class InputThread extends Thread{
	private Res res;
	Condition newCondition;
	public InputThread(Res res, Condition newCondition){
		 this.res=res;
		 this.newCondition=newCondition;
	}
	
	public void run(){
		int count = 0;
		while(true){
			try {
				res.lock.lock();
				if (res.flag) {
					try {
						newCondition.wait();
					} catch (Exception e) {
						// TODO: handle exception
					}
				}
				
				if (count ==0) {
					res.userName="lcy";
					res.sex="ÄÐ";
				}else {
					res.userName="lyf";
					res.sex="Å®";
					
				}
				count=(count+1)%2;
				res.flag=true;
				newCondition.signal();
			} catch (Exception e) {
				// TODO: handle exception
			}finally {
				res.lock.unlock();
			}
			
			
			
		}
		
		
	}
	
	
}

class OutTread extends Thread{
	
	private Res res;
	private Condition newCondition;
	public OutTread(Res res, Condition condition) {
		this.res =res;
		this.newCondition=condition;
	
	}
	
  public void run(){
	  while(true){
		  try {
			res.lock.lock();
			if (!res.flag) {
				try {
					newCondition.await();
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
			
			System.out.println(res.userName+""+res.sex);
			res.flag=false;
			newCondition.signal();
			
		} catch (Exception e) {
			// TODO: handle exception
		}finally{
			res.lock.unlock();
		}
	  }
  }	
}



public class Test06 {

	
	public static void main(String[] args){
		Res res = new Res();
		Condition condition = res.lock.newCondition();
		InputThread inputThread = new InputThread(res, condition);
		OutTread outThread = new OutTread(res,condition);
		inputThread.start();
		outThread.start();
		
	}
	
	
	
	
  
 	
}
